{"version":3,"sources":["components/Header/Header.js","components/Footer.js","components/Wrapper/index.js","components/FriendCard/index.js","components/Navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["style","width","textAlign","color","marginBottom","padding","borderBottom","borderTop","Header","props","react_default","a","createElement","className","display","score","highscore","main","background","link","Footer","href","Wrapper","children","FriendCard","onClick","selectImage","id","alt","name","src","image","fontFamily","Navbar","App","state","friends","friendsJSON","highScore","endGame","_this","setState","console","log","this","forEach","item","clicked","win","currentFriends","currentScore","i","length","sort","Math","random","_this2","components_Wrapper","Navbar_Navbar","Header_Header","map","friend","components_FriendCard","key","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ac195a9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nconst style =  {\r\n    width: \"100%\",\r\n    textAlign: \"center\",\r\n    color: \"#black\",\r\n    marginBottom: \"50px\",\r\n    padding: \"2rem\",\r\n    borderBottom: \"1px solid white\",\r\n    borderTop: \"1px solid white\"\r\n  }\r\n\r\n  \r\nfunction Header(props) {\r\n    return (\r\n        <div className=\"jumbotron-fluid\" style={style}>\r\n            <h1 className=\"display-4\">Avengers Memory Game</h1>\r\n            <p>Try and click as many cards as you can, but don't choose the same card twice!</p>\r\n            <span>{props.display}</span>\r\n            <hr></hr>\r\n            <span className=\"score\" >Score: {props.score}   High Score: {props.highscore}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nlet style = {\r\n    main: {\r\n    background: \"black\",\r\n    color: \"white\",\r\n    width: \"100%\"\r\n    },\r\n    link: {\r\n        color: \"white\"\r\n    }\r\n\r\n}\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer className=\"page-footer font-small blue pt-4\" style={style.main}>\r\n            <div className=\"footer-copyright text-center py-3\">Â© 2019 Copyright:\r\n                <a style={style.link} href=\"https://evanjo03.github.io\"> John Evans</a>\r\n            </div>\r\n        </footer>\r\n    )\r\n}\r\n\r\n\r\nexport default Footer;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction FriendCard(props) {\n  return (\n    <div className=\"card\"  onClick={() => props.selectImage(props.id)}>\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n      <div className=\"content\">\n        <strong>{props.name}</strong>\n\n        {/* <p>CLicked:{props.clicked.toString()} </p>\n        <p>{props.id}</p> */}\n      </div>\n\n    </div>\n  );\n}\n\nexport default FriendCard;\n","import React from \"react\";\r\n\r\nconst style = {\r\n    width: \"100%\",\r\n    fontFamily: \"'Rubik', sans-serif\",\r\n}\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\" style={style}>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n                <ul className=\"navbar-nav\">\r\n                    <li className=\"nav-item\">\r\n                        <a className=\"nav-link\" href=\"https://github.com/evanjo03/clickGame\">Github</a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from \"react\";\nimport Header from \"./components/Header/Header\"\nimport Footer from \"./components/Footer\";\nimport Wrapper from \"./components/Wrapper\";\nimport friendsJSON from \"./friends.json\";\nimport FriendCard from \"./components/FriendCard\";\nimport Navbar from \"./components/Navbar/Navbar\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    friends: friendsJSON,\n    score: 0,\n    highScore: 0,\n    display: \"Choose a card to start the game!\"\n  };\n\n  endGame = () => {\n    if (this.state.score > this.state.highScore) {\n      this.setState({\n        highScore: this.state.score\n      }, function () {\n        console.log(this.state)\n      });\n    }\n    this.state.friends.forEach(item => {\n      item.clicked = false;\n    })\n    this.setState({\n      score: 0,\n      display: \"You lose! Try again to beat your score!\"\n    });\n  }\n\n  win = () => {\n    this.state.friends.forEach(item => {\n      item.clicked = false;\n    });\n    this.setState({\n      score: 0,\n      highScore: 12,\n      display: \"You win! Great job!\"\n    });\n  }\n\n\n  selectImage = (id) => {\n    let currentFriends = this.state.friends;\n    let currentScore = this.state.score;\n\n    let clicked;\n    for (let i = 0; i < currentFriends.length; i++) {\n      if (currentFriends[i].id === id) {\n        clicked = currentFriends[i]\n      }\n    }\n\n    //if the image hasn't been clicked yet\n    if (clicked.clicked === false) {\n      //set the image to clicked\n      clicked.clicked = true\n\n      //increment the score\n      currentScore++;\n\n      //if the score is 12\n      if (currentScore === 12) {\n        this.win()\n      } else {\n        //set the state\n        this.setState({\n          friends: currentFriends,\n          score: currentScore,\n          display: \"Good guess!\"\n        });\n        console.log(this.state);\n\n        this.state.friends.sort(() => Math.random() - 0.5)\n\n      }\n    } else {// if the image has been clicked\n      this.endGame();\n    }\n\n  }\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n        <Navbar />\n        <Header score={this.state.score} highscore={this.state.highScore} display={this.state.display}/>\n        {this.state.friends.map((friend) => (\n          <FriendCard\n            selectImage={this.selectImage}\n            id={friend.id}\n            key={friend.id}\n            name={friend.name}\n            image={friend.image}\n            clicked={friend.clicked}\n          />\n        ))}\n        <Footer />\n      </Wrapper>\n    )\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}